클래스 구성 요소

필드  
   - 클래스에 포함된 변수(variable)
   - 선언된 위치에 따라
      1. 클래스 변수(static variable)
      2. 인스턴스 변수(instance variable)
      3. 지역 변수(local variable)
 
생성자
  - 클래스를 가지고 객체를 생성하면, 해당 객체는 
     메모리에 즉시 생성
  - 객체의 생성과 동시에 인스턴스 변수를 원하는 
     값으로 초기화할 수 있는 생성자(constructor)라는 
     메소드를 제공

메소드
  - 어떠한 특정 작업을 수행하기 위한 명령문의 집합
  - 코드의 반복적인 내용을 하나로 작성 가능
  - 모듈화로 가독성이 좋아짐
  - 유지보수 시간 단축 


클래스 구성 요소 - 필드

1. 클래스 변수(static variable)
  - static 키워드를 가지는 변수
  - 클래스가 메모리에 올라갈 때 생성되고 프로그램 종료 시 소멸

2. 인스턴스 변수(instance variable)
  - static 키워드를 가지지 않는 변수
  - 인스턴스 생성 시 생성되고 인스턴스 소멸 시 소멸

3. 지역 변수(local variable)
  - 메소드나 생성자, 초기화 블록 내에 위치한 변수
  - 블록 내에서만 적용 가능

* 초기화하지 않은 필드는 객체 생성 시 자동으로 선언한 타입의 
    기본 값으로 초기화 된다.


class 자식클래스이름 extend 부모클래스이름 { ... }

자식 클래스(child class) : 부모 클래스의 모든 특성을 물려받아 새롭게 작성된 클래스를 의미


super();는 자바에서 부모 클래스의 생성자를 호출하는 데 사용

extends를 통해 부모 클래스를 상속받으면, 부모 클래스의 생성자와 멤버를 자동으로 상속받는 것이 맞습니다.
하지만, 생성자는 상속되지 않습니다. 따라서, 부모 클래스의 생성자는 반드시 명시적으로 호출되거나,
컴파일러에 의해 암묵적으로 호출되어야 합니다.


this와 super의 차이
this()

this는 같은 클래스 내부에서 인스턴스 변수나 메서드를 명확히 가리킬 때, 
 또는 생성자에서 인자를 현재 객체의 필드에 할당할 때 사용됩니다.

super은 부모 클래스의 생성자를 호출합니다.
 자식 클래스에서 부모 클래스의 초기화를 위해 사용됩니다.


매개변수(파라미터)는 메서드나 생성자를 호출할 때 외부에서 전달된 값을 받기 위해 사용하는 변수입니다.
 매개변수는 메서드나 생성자의 호출 시점에서 필요한 데이터를 전달받기 위한 임시적인 역할을 한다.

 매개변수는 외부에서 전달된 값을 메서드나 생성자가 내부적으로 처리할 수 있도록 전달하는 역할을 합니다.
 상속받은 필드나 메서드와는 다른 개념으로, 매개변수는 호출할 때마다 값이 바뀔 수 있으며, 해당 호출 스코프 내에서만 유효합니다.

final 메소드와 클래스에 선언된 것은 오버라이딩 할 수 없다.

protected

pakage ch07.sec06.package1;

public class A{

    protected String field;
    
    protected A(){
    }
    protected void method(){
    }
}

package ch07.sec06.package1;

import ch07.sec06.package1.A;
public class D extends A{
    public D() {
        super();
    }
    public void method1() {
        this.field = "value";
        this.method():
    }

    public void method() {
    A a = new A();
    a.field = "value";
    a.method();;
    }
}
protected 접근 제한자는 같은 패키지 내에서는 접근이 가능하고, 다른 패키지에서 상속 받은 클래스에서 접근할 수 있습니다.
그러나 protected 필드나 메소드를 상속하지 않은 객체에서 직접 접근하려고 하면 오류가 발생합니다.

에러 분석:
D 클래스의 method1 메소드에서는 this.field와 this.method()를 사용하여 A 클래스의 protected 멤버에 접근하고 있기 때문에 문제가 없습니다.
this는 D 클래스의 인스턴스를 의미하며, D는 A를 상속받았기 때문에 protected 멤버에 접근할 수 있습니다.

하지만 method에서 A 클래스를 직접 인스턴스화(A a = new A();)하여 a.field와 a.method()에 접근하려고 했기 때문에 문제가 발생합니다.
protected 멤버는 같은 패키지 내에서만 접근할 수 있기 때문에, 다른 패키지에서 A의 인스턴스를 생성하고 그 멤버에 접근하려고 하면 접근 불가 오류가 발생합니다.

타입 확인 방법
Instanceof 연산자 사용
  - 왼쪽의 객체가 오른쪽에 있는 클래스 또는 인터페이스의
    인스턴스인지 확인     



getClass() 메소드 사용
  - 객체의 정확한 클래스를 반환


